'use strict';

// Read meta data out of each HTML file in given directory.
// Requires jsdom package installed, and a tree structure of HTML files, for
// example:
// $ cd /var/tmp
// $ mkdir test
// $ cd test
// $ httrack https://developer.mozilla.org/
// Please be nice with https://developer.mozilla.org/ and only get a part of it

var fs = require('fs')
  , path = require('path')
  , jsdom = require('jsdom')
  , deferred = require('deferred')
  , fs2 = require('fs2')
  , readdir = fs2.readdir

// Convert Node.js async functions, into ones that return a promise
  , promisify = require('deferred').promisify
  , readFile = promisify(fs.readFile)
  , stat = promisify(fs.stat)
  , open = promisify(fs.open, 2)
  , close = promisify(fs.close)

// Provide path containing some HTML files (replace with a valid path for you)
  , root = '/var/tmp/test/developer.mozilla.org'

// On a Unix `ulimit -n` usually returns 1024
  , CONCURRENT_TASKS_RUNNING_LIMIT = 500

// The farest end where to look for the title and description
  , CONTENT_INSPECTION_FIRST_BYTES_COUNT = 11784

  , extract, indexDocs, result = {};

/**
 * @param {string} html
 * @returns {Function} a promise
 */
extract = function (html) {
    var def = deferred();

    // Process HTML with jsdom parser
    jsdom.env({
        html: String(html),
        done: function (errors, window) {
            var data, elems;
            if (errors) {
                def.reject(new Error(errors));
                return;
            }

            data = {};
            // The title is the content of the 1st "h1" element
            elems = window.document.getElementsByTagName('h1');
            if (elems.length) data.title = elems[0].textContent;

            // The description is the content of the 1st "p" element
            elems = window.document.getElementsByTagName('p');
            if (elems.length) data.description = elems[0].textContent;

            // Freeing memory associated with the window
            window.close();

            def.resolve(data);
        }
    });

    return def.promise;
};

/**
 * @returns {Function} a promise
 */
indexDocs = function () {
    // WARNING:
    // Functions promisified in fs2 don't auto-resolve input arguments
    // as function generated by promisify.
    // This will change in the next versions of fs2.
    return readdir(root,
            {
                depth: Infinity,
                type: {file: true},
                pattern: /.*\.html$/
            })
        .map(deferred.gate(function (file_path) {
            console.log("file_path:", file_path);
            file_path = path.join(root, file_path);
            return stat(file_path).then(function(stat) {
                var doc_metadata = {
                    path: file_path,
                    modified: stat.mtime,
                    size: stat.size
                };
                result[file_path] = doc_metadata;

                // Reading the whole file
                // return readFile(file_path);
                // Optimization: reading just the first N bytes of the file
                return readFirstBytes(file_path, CONTENT_INSPECTION_FIRST_BYTES_COUNT);
            }).then(extract).aside(function (data) {
                result[file_path].title = data.title;
                result[file_path].description = data.description;
                console.log("result items:",
                            Object.getOwnPropertyNames(result).length,
                            ", last item:", result[file_path]);
            });
        }), CONCURRENT_TASKS_RUNNING_LIMIT);
};

/**
 * @param {string} file_path
 * @param {number} byte_count
 * @returns {Function} a promise
 */
function readFirstBytes(file_path, byte_count) {
    return open(file_path, 'r')
        .then(function(fd) {
            var def = deferred();

            var buffer = new Buffer(byte_count);
            fs.read(fd, buffer, 0, buffer.length, null,
                    function(err, bytes_read, buffer) {
                        if (err) {
                            console.error(err);
                            def.resolve(err);
                        }
                        var data = buffer.toString('utf8', 0, bytes_read);

                        // Closing file in the background
                        // TODO: Improve this
                        fs.close(fd);

                        def.resolve(data);
                    });

            return def.promise;
        });
}

indexDocs().done(function (result) {
    console.log("result:", result);
},function (err) {
    console.error("err:", err);
});

